# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/core/06_recslam_catalog.ipynb.

# %% ../../../nbs/core/06_recslam_catalog.ipynb 3
# basic imports
from __future__ import annotations

# sys and paths imports
import json
import logging
import os
import re
import sys
import time
import weakref

# typing imports
from abc import ABC, abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Generic, Literal

# cv and image imports
import cv2
import ipywidgets as widgets
import numpy as np
import pandas as pd
from dotenv import load_dotenv

# widgets imports
from IPython.display import display
from PIL import Image as PImage
from transitions import Machine

from ...core.data.video import sample_frames_from_video
from ...core.files.structure import FSNode, GSBrowserFileStructure
from ds_contrib.core.paths import (
    Directory,
    PathLike,
    handle_existing,
    handle_existing_path,
    list_paths,
    pathify,
)

# visualization imports
from ...core.plotting import plot
from ...core.utils import Iterifiable, T, listify

# from ds_contrib.tools.browser import ImageBrowser
from ..io.gscloud import GSBrowser, GSBrowserContext

# %% auto 0
__all__ = ['logger', 'CameraMetadataDTO', 'DeviceMetadataDTO', 'Metadata', 'DataFrameMetadata', 'MetaDataBox',
           'ItemsDropdownWithMeta', 'RecslamBrowserWidget']

# %% ../../../nbs/core/06_recslam_catalog.ipynb 4
logger = logging.getLogger(__name__)

# %% ../../../nbs/core/06_recslam_catalog.ipynb 8
@dataclass
class CameraMetadataDTO:
    field_of_view: float
    camera_type: str
    fps: int
    resolution: tuple[int, int]
    focal_length: float


@dataclass
class DeviceMetadataDTO:
    os: str
    device: str
    device_raw: str
    app_version: str
    exposure_mode: str
    max_exposure_time: float
    camera_lense_position: int
    orientation: str
    wide_camera: CameraMetadataDTO
    ultra_wide_camera: CameraMetadataDTO

    @classmethod
    def from_json(cls, json_file):
        with open(json_file) as f:
            data = json.load(f)
            wide_camera = CameraMetadataDTO(
                data["cam_fov_2"],
                data["camera_type_2"],
                data["fps2"],
                tuple(map(int, data["video_resolution_2"].split("x"))),
                data["cam_fx_2"],
            )
            ultra_wide_camera = CameraMetadataDTO(
                data["cam_fov"],
                data["camera_type"],
                data["fps"],
                tuple(map(int, data["video_resolution"].split("x"))),
                data["cam_fx"],
            )
            return cls(
                data["os"],
                data["device"],
                data["device_raw"],
                data["app_version"],
                data["exposure_mode"],
                data["max_exposure"],
                data["cam_lens_pos"],
                data["orientation"],
                wide_camera,
                ultra_wide_camera,
            )

# %% ../../../nbs/core/06_recslam_catalog.ipynb 13
class Metadata(ABC):
    @abstractmethod
    def __getitem__(self, item) -> dict[str, Any]:
        raise NotImplementedError()


class DataFrameMetadata(Metadata):
    def __init__(self, df: pd.DataFrame, index_column=None):
        # Warning: this may slow down the init
        self._df = df.copy()
        if index_column:
            self._df.set_index(index_column, inplace=True)

    def __getitem__(self, item) -> dict[str, Any]:
        return self._df.loc[item].to_frame()

    def keys(self):
        return self._df.index.tolist()

    def _repr_html_(self):
        return self._df._repr_html_()

# %% ../../../nbs/core/06_recslam_catalog.ipynb 15
class MetaDataBox:
    def __init__(self, meta: Metadata) -> None:
        # self.item_meta_box = widgets.Textarea(
        #     value="",
        #     description="",
        #     disabled=True,
        #     layout=widgets.Layout(width="80%", height="30em"),
        #     placeholder="Row content will be displayed here",
        # )
        self.item_meta_box = widgets.Output()
        self._meta = meta

    def set_item_meta(self, index_id):
        items: pd.DataFrame = self._meta[index_id]
        # drop linestring column due too long values
        items = items.drop(index=["Route"])
        with pd.option_context("display.max_colwidth", None):
            with self.item_meta_box:
                self.item_meta_box.clear_output()
                display(items)

    @property
    def widget(self):
        return self.item_meta_box


class ItemsDropdownWithMeta(Generic[T]):
    def __init__(
        self, items: list[T], meta: Metadata | None = None, description=None
    ) -> None:
        self._items = items
        self._meta = meta
        self._description = description
        self._setup_gui()
        self._setup_callbacks()

    def _setup_gui(self):
        self.dropdown = widgets.Dropdown(
            options=self._items,
            description=self._description,
            disabled=False,
            layout=widgets.Layout(width="30%"),
        )
        self._metadata_box = MetaDataBox(self._meta)
        self._widget = widgets.VBox([self.dropdown, self._metadata_box.widget])

    def _setup_callbacks(self):
        self.dropdown.observe(self._cb_on_dropdown_change, names="value")

    def _cb_on_dropdown_change(self, change):
        self._metadata_box.set_item_meta(change.new)

    @property
    def widget(self):
        # use it to prefill the dropdown
        self.dropdown.notify_change(
            {"name": "value", "old": None, "new": self._items[0], "type": "change"}
        )
        return self._widget

    @property
    def value(self) -> T:
        return self.dropdown.value

# %% ../../../nbs/core/06_recslam_catalog.ipynb 27
class RecslamBrowserWidget:
    def __init__(self, catalog: pd.DataFrame, gs_browser: GSBrowser) -> None:
        self._catalog = catalog
        self._meta = DataFrameMetadata(catalog)
        self._frames_path = None
        self._browser = gs_browser

        self._init_gui()
        self._setup_callbacks()
        self._init_state_machine()
        self._downloads_dir = Directory(f"downloads/", temporary=True)
        self._downloads_path = self._downloads_dir.path

        self._finalizer = weakref.finalize(self, self._cleanup, self._downloads_dir)

        self.RESET()

    @classmethod
    def _cleanup(cls, downloads_dir: Directory):
        downloads_dir.cleanup()

    def _init_state_machine(self):
        states = ["selection", "downloading", "sampling", "ready"]
        self.fsm = Machine(model=self, states=states, initial="selection")
        self.fsm.add_transition(trigger="RESET", source="*", dest="selection")
        self.fsm.add_transition(
            trigger="DOWNLOADING", source="selection", dest="downloading"
        )
        self.fsm.add_transition(
            trigger="SAMPLING", source="downloading", dest="sampling"
        )
        self.fsm.add_transition(trigger="READY", source="sampling", dest="ready")

    def _init_gui(self):
        self._catalog_sampler = ItemsDropdownWithMeta(
            self._meta.keys(), meta=self._meta, description="Videos"
        )
        self._process_button = widgets.Button(
            description="Process", style={"button_color": "lightgreen"}
        )
        self._widget = widgets.VBox(
            [self._catalog_sampler.widget, self._process_button]
        )

    def _setup_callbacks(self):
        self._process_button.on_click(self._cb_on_process_button_click)
        self._catalog_sampler.dropdown.observe(
            self._cb_on_catalog_sampler_change, names="value"
        )

    def _cb_on_process_button_click(self, change=None):
        self._process_button.disabled = True
        self._catalog_sampler.dropdown.disabled = True
        self.download_video()
        self.sample_frames()
        self.READY()
        self._catalog_sampler.dropdown.disabled = False
        self._process_button.disabled = False

    def _cb_on_catalog_sampler_change(self, change):
        self.RESET()

    def download_video(self):
        self.DOWNLOADING()
        self._chosen_session = self._catalog_sampler.value
        # video_url = self._catalog.loc[chosen_session, "video_url"]
        self._session_path = (
            f'roadly-dev-videos/{self._catalog.loc[self._chosen_session, "Path"]}/'
        )

        self._session_dir = Directory(
            f"{self._downloads_path}/{self._chosen_session}", temporary=False
        )
        self._dfs = GSBrowserFileStructure(
            self._browser,
            self._session_dir,
            CONFIGS_DIR / "storage/recslam/recslam_structure.json",
            self._session_path,
        )
        self._dfs.get("camera_wide/video")

    def sample_frames(self):
        self.SAMPLING()
        self._video_path: Path = self._dfs["camera_wide/video"].meta["local_path"]
        self._frames_path = self._video_path.parent / "frames"
        self._frames_dir = Directory(self._frames_path, temporary=False)
        sample_frames_from_video(self._video_path, self._frames_dir)

    @property
    def widget(self):
        return self._widget

    @property
    def frames(self):
        return list(
            list_paths(self._frames_path, recursive=True, sort=True)
            if self._frames_path
            else []
        )
