# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/tools/snippet_generator.ipynb.

# %% auto 0
__all__ = ['to_snippet_str']

# %% ../../../nbs/tools/snippet_generator.ipynb 2
import argparse
import json
import shlex

from IPython.core.magic import register_cell_magic

# %% ../../../nbs/tools/snippet_generator.ipynb 3
def _convert_to_snippet(
    code: str, snippet_name: str, prefix: str, description: str | None = None
):
    if not snippet_name or not prefix:
        raise ValueError(
            "snippet_name and prefix must be provided, use -n and -d arguments"
        )
    lines = code.split("\n")[:-1]
    json_data = {
        snippet_name: {
            "prefix": prefix,
            "body": lines,
            "description": description if description else snippet_name,
        }
    }
    str_repr = json.dumps(json_data, indent=4)
    return "\n".join(str_repr.split("\n")[1:-1])

# %% ../../../nbs/tools/snippet_generator.ipynb 4
@register_cell_magic
def to_snippet_str(line, cell):
    """Convert a cell to a VSCode snippet string

    Use it as a cell magic in Jupyter notebooks:
    `%%to_snippet_str -n snippet_name -p prefix -d description`
    -d is optional

    -n is the name of the snippet in snippets declaration file
    -p is the prefix for the snippet, it is used to trigger the snippet, e.g. if the prefix is "snippet", then typing "snippet" in
        the editor will trigger the snippet (it will be injected into autocompletion)
    -d is the description of the snippet, it is shown in the autocompletion

    Parameters
    ----------
    line : int, it will be specified by Jupyter
    cell : int, it will be specified by Jupyter
    """
    # Use shlex.split for a shell-like split keeping quoted strings together
    tokens = shlex.split(line)

    # Initialize argparse parser
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--name", help="Snippet name")
    parser.add_argument("-p", "--prefix", help="Prefix for the snippet")
    parser.add_argument("-d", "--description", help="Description for the snippet")
    parser.add_argument(
        "-f",
        "--file",
        help="File to save the snippet to",
        default="~/Library/Application Support/Code/User/snippets/jupyter_notebook_snippets.code-snippets",
    )

    # Use shlex.split to treat the line as a command-line input
    args = parser.parse_args(tokens)

    snippet = _convert_to_snippet(cell, args.name, args.prefix, args.description)
    print(snippet)
